package ProyectoFinal.forms;

import javax.swing.JOptionPane;
import ProyectoFinal.Hiring;
import ProyectoFinal.Employee;
import ProyectoFinal.Utils;

/**
 *
 * @author User
 */
public class HiringStaffForm extends javax.swing.JFrame {

    /**
     * Creates new form ContratacionPersonalForm
     */
    public HiringStaffForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StaffHiringLabel = new javax.swing.JLabel();
        ReturnButton = new javax.swing.JButton();
        EmployeeNameLabel = new javax.swing.JLabel();
        EmployeeNameTxt = new javax.swing.JTextField();
        EmployeeLastNameLabel = new javax.swing.JLabel();
        EmployeeLastNameTxt = new javax.swing.JTextField();
        PositionLabel = new javax.swing.JLabel();
        EmployeePositionTxt = new javax.swing.JTextField();
        SalaryLabel = new javax.swing.JLabel();
        DepartmentLabel = new javax.swing.JLabel();
        EmployeeSalaryTxt = new javax.swing.JFormattedTextField();
        AddContractButton = new javax.swing.JButton();
        SubtitleLabel = new javax.swing.JLabel();
        EmployeeIdLabel = new javax.swing.JLabel();
        EmployeeIdTxt = new javax.swing.JTextField();
        ContractualTypeLabel = new javax.swing.JLabel();
        ContractualTypeComboBox = new javax.swing.JComboBox<>();
        ContractualWorkTimeTxt = new javax.swing.JTextField();
        ContractualWorkLabel = new javax.swing.JLabel();
        StartDateLabel = new javax.swing.JLabel();
        StartDateTxt = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ContractsTable = new javax.swing.JTable();
        SubtitleLabel2 = new javax.swing.JLabel();
        ContractConsultButton = new javax.swing.JButton();
        EndContractButton = new javax.swing.JButton();
        UndoSelectionButton = new javax.swing.JButton();
        CleanButton = new javax.swing.JButton();
        SearchEmployeeButton = new javax.swing.JButton();
        DepartmentComboBox = new javax.swing.JComboBox<>();
        ModifyContractButton = new javax.swing.JButton();
        SelectContractButton = new javax.swing.JButton();
        ContractIdLabel = new javax.swing.JLabel();
        ContractIdTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        StaffHiringLabel.setFont(new java.awt.Font("Eras Medium ITC", 0, 18)); // NOI18N
        StaffHiringLabel.setText("Contratación de Personal");

        ReturnButton.setText("Regresar al Menú Principal");
        ReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnButtonActionPerformed(evt);
            }
        });

        EmployeeNameLabel.setText("Nombre del empleado:");

        EmployeeNameTxt.setEditable(false);
        EmployeeNameTxt.setToolTipText("Ej: Javier Ernesto");
        EmployeeNameTxt.setEnabled(false);

        EmployeeLastNameLabel.setText("Apellido del empleado:");

        EmployeeLastNameTxt.setEditable(false);
        EmployeeLastNameTxt.setToolTipText("Ej: Lopez Martinez");
        EmployeeLastNameTxt.setEnabled(false);

        PositionLabel.setText("Cargo:");

        EmployeePositionTxt.setEditable(false);
        EmployeePositionTxt.setToolTipText("Ej: Reclutador");
        EmployeePositionTxt.setEnabled(false);

        SalaryLabel.setText("Salario:");

        DepartmentLabel.setText("Departamento asignado:");

        EmployeeSalaryTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));
        EmployeeSalaryTxt.setToolTipText("Ej: Q20000.00");
        EmployeeSalaryTxt.setEnabled(false);

        AddContractButton.setText("Iniciar Contrato");
        AddContractButton.setEnabled(false);
        AddContractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddContractButtonActionPerformed(evt);
            }
        });

        SubtitleLabel.setFont(new java.awt.Font("Eras Medium ITC", 0, 14)); // NOI18N
        SubtitleLabel.setText("Contratación de Empleados");

        EmployeeIdLabel.setText("Código de Empleado:");

        EmployeeIdTxt.setToolTipText("Ej: 45");

        ContractualTypeLabel.setText("Tipo de Contrato:");

        ContractualTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona una opción", "Contrato por tiempo indefinido", "Contrato por tiempo definido", "Contrato por obra", "Contrato por servicios" }));
        ContractualTypeComboBox.setEnabled(false);
        ContractualTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContractualTypeComboBoxActionPerformed(evt);
            }
        });

        ContractualWorkTimeTxt.setToolTipText("Ej: 24");
        ContractualWorkTimeTxt.setEnabled(false);

        ContractualWorkLabel.setText("Tiempo de contrato (en meses):");

        StartDateLabel.setText("Fecha de inicio:");

        StartDateTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        StartDateTxt.setToolTipText("Ej: 12/12/2012");
        StartDateTxt.setEnabled(false);

        ContractsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ContractsTable.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(ContractsTable);

        SubtitleLabel2.setFont(new java.awt.Font("Eras Medium ITC", 0, 14)); // NOI18N
        SubtitleLabel2.setText("Consulta de contratos vigentes");

        ContractConsultButton.setText("Consultar contratos vigentes");
        ContractConsultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContractConsultButtonActionPerformed(evt);
            }
        });

        EndContractButton.setText("Finalizar Contrato");
        EndContractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EndContractButtonActionPerformed(evt);
            }
        });

        UndoSelectionButton.setText("Eliminar selección");
        UndoSelectionButton.setEnabled(false);
        UndoSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoSelectionButtonActionPerformed(evt);
            }
        });

        CleanButton.setText("Limpiar");
        CleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanButtonActionPerformed(evt);
            }
        });

        SearchEmployeeButton.setText("Buscar empleado");
        SearchEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchEmployeeButtonActionPerformed(evt);
            }
        });

        DepartmentComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opción", "Dirección Ejecutiva", "Secretaría", "Unidad de Auditoría Interna", "Recursos Humanos", "Tecnología de la Información", "Finanzas", "Marketing", "Operaciones", "Ventas", "Logística" }));
        DepartmentComboBox.setEnabled(false);

        ModifyContractButton.setText("Modificar Contrato");
        ModifyContractButton.setEnabled(false);
        ModifyContractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyContractButtonActionPerformed(evt);
            }
        });

        SelectContractButton.setText("Seleccionar Contrato");
        SelectContractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectContractButtonActionPerformed(evt);
            }
        });

        ContractIdLabel.setText("ID Contrato:");

        ContractIdTxt.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ContractIdLabel)
                                    .addComponent(EmployeeIdLabel)
                                    .addComponent(EmployeeNameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(ContractIdTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(EmployeeIdTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SearchEmployeeButton))
                                    .addComponent(EmployeeNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(EmployeeLastNameLabel)
                                    .addComponent(PositionLabel)
                                    .addComponent(SalaryLabel)
                                    .addComponent(DepartmentLabel)
                                    .addComponent(StartDateLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(DepartmentComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 190, Short.MAX_VALUE)
                                    .addComponent(EmployeeSalaryTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EmployeePositionTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EmployeeLastNameTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(StartDateTxt)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(84, 84, 84)
                                    .addComponent(SubtitleLabel))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(86, 86, 86)
                                    .addComponent(ContractualTypeLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ContractualTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(178, 178, 178)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(ContractualWorkLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ContractualWorkTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(AddContractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ModifyContractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(UndoSelectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CleanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(SubtitleLabel2)
                                .addGap(132, 132, 132))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(ContractConsultButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EndContractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SelectContractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 23, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(412, 412, 412)
                        .addComponent(StaffHiringLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StaffHiringLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(SubtitleLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SubtitleLabel2)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SelectContractButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(EndContractButton)
                                .addComponent(ContractConsultButton)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ContractIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ContractIdLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmployeeIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchEmployeeButton)
                            .addComponent(EmployeeIdLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmployeeNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmployeeNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmployeeLastNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmployeeLastNameLabel))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmployeePositionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PositionLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmployeeSalaryTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SalaryLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DepartmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DepartmentLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StartDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StartDateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ContractualTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ContractualTypeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ContractualWorkTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ContractualWorkLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ModifyContractButton)
                            .addComponent(AddContractButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UndoSelectionButton)
                            .addComponent(CleanButton))
                        .addGap(18, 18, 18)
                        .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnButtonActionPerformed
        //cerrar el form actual definitivamente
        this.dispose();
    }//GEN-LAST:event_ReturnButtonActionPerformed

    private void ContractConsultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContractConsultButtonActionPerformed
        //Consultar los contratos vigentes y mostrarlos en la tabla
        Hiring.getActiveContracts();

        //validar si existe un modelo de tabla si no crear uno
        ContractsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID Contrato", "ID Empleado", "Fecha de inicio", "Tipo de contrato", "Duración de contrato", "Salario"
                }
        ));

        //Limpiar la tabla
        ((javax.swing.table.DefaultTableModel) ContractsTable.getModel()).setRowCount(0);

        //Agregar los contratos vigentes a la tabla
        for (Hiring contrato : Hiring.activeContracts) {
            ((javax.swing.table.DefaultTableModel) ContractsTable.getModel()).addRow(new Object[]{
                contrato.getIdContratacion(),
                contrato.getEmployeeId(),
                contrato.getStartDate(),
                contrato.getContractType(),
                contrato.getContractDuration(),
                contrato.getSalary()
            });
        }

        //Mostrar un mensaje de éxito
        JOptionPane.showMessageDialog(null, "Contratos vigentes consultados exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_ContractConsultButtonActionPerformed

    private void EndContractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EndContractButtonActionPerformed
        // El contrato seleccionado en el JTable se debe finalizar si está seleccionado
        if (ContractsTable.getSelectedRow() == -1) {
            // Mostrar un mensaje de error
            JOptionPane.showMessageDialog(null, "Por favor, seleccione un contrato.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Preguntar si está seguro de finalizar el contrato
        int dialogResult = JOptionPane.showConfirmDialog(null, "¿Está seguro de finalizar el contrato?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.NO_OPTION) {
            return;
        }

        // Obtener el ID del contrato seleccionado
        int idContrato = Integer.parseInt(ContractsTable.getValueAt(ContractsTable.getSelectedRow(), 0).toString());
        // Finalizar el contrato seleccionado
        boolean exito = Hiring.finalizarContrato(idContrato);
        if (exito){
            JOptionPane.showMessageDialog(null, "Contrato finalizado correctamente", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No se ha podido finalizar el contrato", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EndContractButtonActionPerformed

    private void UndoSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoSelectionButtonActionPerformed
        ContractsTable.clearSelection();
    }//GEN-LAST:event_UndoSelectionButtonActionPerformed

    private void CleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleanButtonActionPerformed
        //Limpiar todos los campos
        ContractIdTxt.setText("");
        EmployeeIdTxt.setText("");
        EmployeeNameTxt.setText("");
        EmployeeLastNameTxt.setText("");
        EmployeePositionTxt.setText("");
        EmployeeSalaryTxt.setText("");
        DepartmentComboBox.setSelectedIndex(0);
        StartDateTxt.setText("");
        ContractualTypeComboBox.setSelectedIndex(0);
        ContractualWorkTimeTxt.setText("");
        EmployeeSalaryTxt.setEnabled(false);
        StartDateTxt.setEnabled(false);
        ContractualTypeComboBox.setEnabled(false);
        AddContractButton.setEnabled(false);
        ModifyContractButton.setEnabled(false);
        UndoSelectionButton.setEnabled(false);
    }//GEN-LAST:event_CleanButtonActionPerformed

    private void ContractualTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContractualTypeComboBoxActionPerformed
        // Si el tipo de contrato es por tiempo indefinido, no se debe ingresar un tiempo de contrato
        if (ContractualTypeComboBox.getSelectedIndex() == 1 ) {
            ContractualWorkTimeTxt.setEnabled(false);
            ContractualWorkTimeTxt.setVisible(false);
            ContractualWorkLabel.setVisible(false);
        } else if (ContractualTypeComboBox.getSelectedIndex() > 1){
            ContractualWorkTimeTxt.setVisible(true);
            ContractualWorkTimeTxt.setEnabled(true);
            ContractualWorkLabel.setVisible(true);
        } else if (ContractualTypeComboBox.getSelectedIndex() == 0){
            ContractualWorkTimeTxt.setVisible(true);
            ContractualWorkTimeTxt.setEnabled(false);
            ContractualWorkLabel.setVisible(true);
        }
    }//GEN-LAST:event_ContractualTypeComboBoxActionPerformed

    private void SearchEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchEmployeeButtonActionPerformed
        if(Employee.getEmployees() == null || Employee.getEmployees().isEmpty()){
        Employee.getAll();
        }
        // Buscar empleado por id
        int idEmpleado = Integer.parseInt(EmployeeIdTxt.getText());
        Employee empleado = Employee.getEmployeeInformation(idEmpleado);
        if (empleado == null){
            JOptionPane.showMessageDialog(this,
                "No se encontró el empleado con ese ID.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            EmployeeNameTxt.setText("");
            EmployeeLastNameTxt.setText("");
            EmployeePositionTxt.setText("");
            EmployeeSalaryTxt.setText("");
            EmployeeSalaryTxt.setEnabled(false);
            StartDateTxt.setEnabled(false);
            ContractualTypeComboBox.setEnabled(false);
            AddContractButton.setEnabled(false);
            ModifyContractButton.setEnabled(false);
            UndoSelectionButton.setEnabled(false);
            return;
        }
        EmployeeNameTxt.setText(empleado.getName());
        EmployeeLastNameTxt.setText(empleado.getLastName());
        EmployeePositionTxt.setText(empleado.getPosition());
        EmployeeSalaryTxt.setText("Q" + empleado.getSalary());
        switch(empleado.getDepartment().toLowerCase()){
                case "dirección ejecutiva" -> DepartmentComboBox.setSelectedIndex(1);
                case "secretaría" -> DepartmentComboBox.setSelectedIndex(2);
                case "unidad de auditoría interna" -> DepartmentComboBox.setSelectedIndex(3);
                case "recursos humanos" -> DepartmentComboBox.setSelectedIndex(4);
                case "tecnología de la información" -> DepartmentComboBox.setSelectedIndex(5);
                case "finanzas" -> DepartmentComboBox.setSelectedIndex(6);
                case "marketing" -> DepartmentComboBox.setSelectedIndex(7);
                case "operaciones" -> DepartmentComboBox.setSelectedIndex(8);
                case "ventas" -> DepartmentComboBox.setSelectedIndex(9);
                case "logística" -> DepartmentComboBox.setSelectedIndex(10);
            }
        EmployeeSalaryTxt.setEnabled(true);
        StartDateTxt.setEnabled(true);
        ContractualTypeComboBox.setEnabled(true);
        AddContractButton.setEnabled(true);
        ModifyContractButton.setEnabled(true);
        UndoSelectionButton.setEnabled(true);
    }//GEN-LAST:event_SearchEmployeeButtonActionPerformed

    private void AddContractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddContractButtonActionPerformed
        if("".equals(EmployeeIdTxt.getText()) || EmployeeIdTxt.getText() == null){
            JOptionPane.showMessageDialog(this,
                "No se puede iniciar el contrato si no se ha seleccionado un Empleado.",
                "Error al obtener información del empleado",
                JOptionPane.OK_OPTION);
            return;
        }
        
        //Solicitar confirmacion de si desea eliminar al empleado
        int dialogResult = JOptionPane.showConfirmDialog (null, "¿Desea crear el contrato para el empleado?" ,"Información",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.NO_OPTION){
            return;
        }
        
        Employee empleado = null;
        empleado = Employee.getEmployeeInformation(Integer.parseInt(EmployeeIdTxt.getText()));
        if (empleado == null){
            JOptionPane.showMessageDialog(this,
                "Debe buscar un Empleado válido antes de iniciar un contrato.",
                "Error al obtener información del empleado",
                JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            int idEmpleado = Integer.parseInt(EmployeeIdTxt.getText());
            String fechaInicio = StartDateTxt.getText();
            String tipoContrato = ContractualTypeComboBox.getSelectedItem().toString();
            System.out.println(tipoContrato);
            int duracion = 0;
            if(ContractualTypeComboBox.getSelectedIndex() == 2 || ContractualTypeComboBox.getSelectedIndex() == 3 || ContractualTypeComboBox.getSelectedIndex() == 4){
                duracion = Integer.parseInt(ContractualWorkTimeTxt.getText());
            } else {
                duracion = 999;
            }            
            Double salario = null;
            String salarioStr = EmployeeSalaryTxt.getText();
            
            //Validar los campos
            if ("".equals(fechaInicio) || fechaInicio == null) {
                JOptionPane.showMessageDialog(this,
                        "La fecha de inicio no puede estar vacía.",
                        "Error al obtener la fecha de inicio",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!Utils.validateDate(fechaInicio)) {
                JOptionPane.showMessageDialog(this,
                        "La fecha de inicio no puede ser mayor a la fecha actual.",
                        "Error al convertir la fecha",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            if ("".equals(tipoContrato) || tipoContrato == null || tipoContrato.equals("Selecciona una opción")) {
                JOptionPane.showMessageDialog(this,
                        "Debe seleccionar un tipo de contrato.",
                        "Error al obtener el tipo de contrato",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            if ("".equals(salarioStr) || salarioStr == null) {
                JOptionPane.showMessageDialog(this,
                        "El salario no puede estar vacío.",
                        "Error al obtener el salario",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            //Convertir el salario a un Double y eliminar la coma
            if (salarioStr.startsWith("Q")) {
                try {
                    // Extraer la parte numérica y convertir a Double
                    salario = Double.valueOf(salarioStr.substring(1).replace(",", "").trim());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this,
                            "El formato del salario es incorrecto. Asegúrese de que sea un número válido.",
                            "Error al convertir el salario",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "El salario debe comenzar con 'Q'.",
                        "Error al obtener el salario",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            boolean contrato = Hiring.addContract(idEmpleado, fechaInicio, tipoContrato, duracion, salario);
            if(!contrato){
                JOptionPane.showMessageDialog(this,
                            "No se ha podido crear el contrato. Verifique la información nuevamente.",
                            "Error al crear contrato",
                            JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this,
                            "El contrato se ha creado exitosamente.",
                            "Información",
                            JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_AddContractButtonActionPerformed

    private void SelectContractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectContractButtonActionPerformed
        //verificar si esta seleccionado un contrato en la tabla
        if (ContractsTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Por favor, seleccione un contrato.", "Error al obtener informacion del contrato", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int idContrato = Integer.parseInt(ContractsTable.getValueAt(ContractsTable.getSelectedRow(), 0).toString());
        int idEmpleado = Integer.parseInt(ContractsTable.getValueAt(ContractsTable.getSelectedRow(), 1).toString());
        if(Employee.getEmployees() == null || Employee.getEmployees().isEmpty()){
        Employee.getAll();
        }
        Employee empleado = Employee.getEmployeeInformation(idEmpleado);
        if (empleado == null){
            JOptionPane.showMessageDialog(this,
                "No se encontró el empleado con ese ID.",
                "Error al obtener información del empleado",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        EmployeeIdTxt.setText(String.valueOf(empleado.getId()));
        EmployeeNameTxt.setText(empleado.getName());
        EmployeeLastNameTxt.setText(empleado.getLastName());
        EmployeePositionTxt.setText(empleado.getPosition());
        EmployeeSalaryTxt.setText("Q" + empleado.getSalary());
        switch(empleado.getDepartment().toLowerCase()){
                case "dirección ejecutiva" -> DepartmentComboBox.setSelectedIndex(1);
                case "secretaría" -> DepartmentComboBox.setSelectedIndex(2);
                case "unidad de auditoría interna" -> DepartmentComboBox.setSelectedIndex(3);
                case "recursos humanos" -> DepartmentComboBox.setSelectedIndex(4);
                case "tecnología de la información" -> DepartmentComboBox.setSelectedIndex(5);
                case "finanzas" -> DepartmentComboBox.setSelectedIndex(6);
                case "marketing" -> DepartmentComboBox.setSelectedIndex(7);
                case "operaciones" -> DepartmentComboBox.setSelectedIndex(8);
                case "ventas" -> DepartmentComboBox.setSelectedIndex(9);
                case "logística" -> DepartmentComboBox.setSelectedIndex(10);
            }
        StartDateTxt.setText(ContractsTable.getValueAt(ContractsTable.getSelectedRow(), 2).toString());
        String tipoContrato = ContractsTable.getValueAt(ContractsTable.getSelectedRow(), 3).toString();
        int duracion = Integer.parseInt(ContractsTable.getValueAt(ContractsTable.getSelectedRow(), 4).toString());
        Double salario = Double.valueOf(ContractsTable.getValueAt(ContractsTable.getSelectedRow(), 5).toString());
        //Mostrar la informacion del contrato seleccionado
        ContractIdTxt.setText(String.valueOf(idContrato));
        ContractualWorkTimeTxt.setText(String.valueOf(duracion));
        EmployeeSalaryTxt.setText("Q" + salario);
        //validar el nombre del contrato para seleccionar el tipo de contrato
        switch(tipoContrato.toLowerCase()){
            case "indefinido":
                ContractualTypeComboBox.setSelectedIndex(1);
                break;
            case "definido":
                ContractualTypeComboBox.setSelectedIndex(2);
                break;
            case "por obra":
                ContractualTypeComboBox.setSelectedIndex(3);
                break;
            case "por servicios":
                ContractualTypeComboBox.setSelectedIndex(4);
                break;
        }
        EmployeeSalaryTxt.setEnabled(true);
        StartDateTxt.setEnabled(true);
        ContractualTypeComboBox.setEnabled(true);
        AddContractButton.setEnabled(true);
        ModifyContractButton.setEnabled(true);
        UndoSelectionButton.setEnabled(true);
    }//GEN-LAST:event_SelectContractButtonActionPerformed

    private void ModifyContractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyContractButtonActionPerformed
        if (ContractsTable.getSelectedRow() == -1 || "".equals(ContractIdTxt.getText()) || ContractIdTxt.getText() == null) {
            JOptionPane.showMessageDialog(null, "Por favor, seleccione un contrato.", "Error al obtener información del contrato", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Solicitar confirmacion de si desea eliminar al empleado
        int dialogResult = JOptionPane.showConfirmDialog (null, "¿Desea modificar el contrato selecionado?" ,"Advertencia",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.NO_OPTION){
            return;
        }

        int idContrato = Integer.parseInt(ContractIdTxt.getText());
        int idEmpleado = Integer.parseInt(EmployeeIdTxt.getText());
        String fechaInicio = StartDateTxt.getText();
        String tipoContrato = ContractualTypeComboBox.getSelectedItem().toString();
        int duracion = Integer.parseInt(ContractualWorkTimeTxt.getText());
        String salarioStr = EmployeeSalaryTxt.getText();
        Double salario = 0.0;
        
        if ("".equals(salarioStr) || salarioStr == null) {
            JOptionPane.showMessageDialog(this,
                    "El salario no puede estar vacío.",
                    "Error al obtener el salario",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (salarioStr.startsWith("Q")) {
                try {
                    // Extraer la parte numérica y convertir a Double
                    salario = Double.valueOf(salarioStr.substring(1).replace(",", "").trim());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this,
                            "El formato del salario es incorrecto. Asegúrese de que sea un número válido.",
                            "Error al convertir el salario",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "El salario debe comenzar con 'Q'.",
                        "Error al obtener el salario",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Validar los campos
        if ("".equals(fechaInicio) || fechaInicio == null) {
            JOptionPane.showMessageDialog(this,
                    "La fecha de inicio no puede estar vacía.",
                    "Error al obtener la fecha de inicio",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!Utils.validateDate(fechaInicio)) {
            JOptionPane.showMessageDialog(this,
                    "La fecha de inicio no puede ser mayor a la fecha actual.",
                    "Error al convertir la fecha",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ("".equals(tipoContrato) || tipoContrato == null || tipoContrato.equals("Selecciona una opción")) {
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar un tipo de contrato.",
                    "Error al obtener el tipo de contrato",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (duracion <= 0) {
            JOptionPane.showMessageDialog(this,
                    "La duración del contrato no puede ser menor o igual a 0.",
                    "Error al obtener la duración del contrato",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (salario <= 0) {
            JOptionPane.showMessageDialog(this,
                    "El salario no puede ser menor o igual a 0.",
                    "Error al obtener el salario",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Modificar el contrato
        boolean exito;
        exito = Hiring.updateContract(idContrato, idEmpleado, fechaInicio, tipoContrato, duracion, salario);
        if (exito){
            JOptionPane.showMessageDialog(null, "Contrato modificado correctamente", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No se ha podido modificar el contrato", "Error al modificar el contrato", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ModifyContractButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HiringStaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HiringStaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HiringStaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HiringStaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new HiringStaffForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddContractButton;
    private javax.swing.JButton CleanButton;
    private javax.swing.JButton ContractConsultButton;
    private javax.swing.JLabel ContractIdLabel;
    private javax.swing.JTextField ContractIdTxt;
    private javax.swing.JTable ContractsTable;
    private javax.swing.JComboBox<String> ContractualTypeComboBox;
    private javax.swing.JLabel ContractualTypeLabel;
    private javax.swing.JLabel ContractualWorkLabel;
    private javax.swing.JTextField ContractualWorkTimeTxt;
    private javax.swing.JComboBox<String> DepartmentComboBox;
    private javax.swing.JLabel DepartmentLabel;
    private javax.swing.JLabel EmployeeIdLabel;
    private javax.swing.JTextField EmployeeIdTxt;
    private javax.swing.JLabel EmployeeLastNameLabel;
    private javax.swing.JTextField EmployeeLastNameTxt;
    private javax.swing.JLabel EmployeeNameLabel;
    private javax.swing.JTextField EmployeeNameTxt;
    private javax.swing.JTextField EmployeePositionTxt;
    private javax.swing.JFormattedTextField EmployeeSalaryTxt;
    private javax.swing.JButton EndContractButton;
    private javax.swing.JButton ModifyContractButton;
    private javax.swing.JLabel PositionLabel;
    private javax.swing.JButton ReturnButton;
    private javax.swing.JLabel SalaryLabel;
    private javax.swing.JButton SearchEmployeeButton;
    private javax.swing.JButton SelectContractButton;
    private javax.swing.JLabel StaffHiringLabel;
    private javax.swing.JLabel StartDateLabel;
    private javax.swing.JFormattedTextField StartDateTxt;
    private javax.swing.JLabel SubtitleLabel;
    private javax.swing.JLabel SubtitleLabel2;
    private javax.swing.JButton UndoSelectionButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
