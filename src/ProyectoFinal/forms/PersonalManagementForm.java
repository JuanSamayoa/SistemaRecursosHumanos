package ProyectoFinal.forms;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ProyectoFinal.Employee; // FIXED: Use new Employee class
import ProyectoFinal.Utils;

/**
 *
 * @author User
 */
@SuppressWarnings("this-escape")
public class PersonalManagementForm extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form GestionPersonalForm
     */
    public PersonalManagementForm() {
        initComponents();
        loadEmployee();
        jTable1.setDefaultEditor(Object.class, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StaffManagementLabel = new javax.swing.JLabel();
        ReturnButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        EmployeeIdLabel = new javax.swing.JLabel();
        EmployeeIDTxt = new javax.swing.JTextField();
        EmployeeNameLabel = new javax.swing.JLabel();
        EmployeeNameTxt = new javax.swing.JTextField();
        EmployeeLastNameLabel = new javax.swing.JLabel();
        EmployeeLastNameTxt = new javax.swing.JTextField();
        StartDateLabel = new javax.swing.JLabel();
        PositionLabel = new javax.swing.JLabel();
        PositionTxt = new javax.swing.JTextField();
        SalaryLabel = new javax.swing.JLabel();
        DepartmentLabel = new javax.swing.JLabel();
        HiringDateTxt = new javax.swing.JFormattedTextField();
        SalaryTxt = new javax.swing.JFormattedTextField();
        SelectButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        TerminationButton = new javax.swing.JButton();
        CleanButton = new javax.swing.JButton();
        AddEmployeeButton = new javax.swing.JButton();
        DepartmentComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setSize(new java.awt.Dimension(1000, 550));

        StaffManagementLabel.setFont(new java.awt.Font("Eras Medium ITC", 0, 18)); // NOI18N
        StaffManagementLabel.setText("Gestión de Personal");

        ReturnButton.setText("Regresar al Menú Principal");
        ReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnButtonActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null }
                },
                new String[] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }));
        jScrollPane1.setViewportView(jTable1);

        EmployeeIdLabel.setText("ID Empleado:");

        EmployeeIDTxt.setEditable(false);

        EmployeeNameLabel.setText("Nombre Empleado:");

        EmployeeLastNameLabel.setText("Apellido Empleado:");

        StartDateLabel.setText("Fecha de Contratación: (dd/mm/aaaa)");

        PositionLabel.setText("Cargo:");

        SalaryLabel.setText("Salario: (QXXXX.XX)");

        DepartmentLabel.setText("Departamento:");

        HiringDateTxt.setFormatterFactory(
                new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));

        SalaryTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
                new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

        SelectButton.setText("Seleccionar");
        SelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectButtonActionPerformed(evt);
            }
        });

        UpdateButton.setText("Modificar");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        TerminationButton.setText("Dar de baja");
        TerminationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TerminationButtonActionPerformed(evt);
            }
        });

        CleanButton.setText("Limpiar");
        CleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanButtonActionPerformed(evt);
            }
        });

        AddEmployeeButton.setText("Agregar");
        AddEmployeeButton.setToolTipText("");
        AddEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddEmployeeButtonActionPerformed(evt);
            }
        });

        DepartmentComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opción",
                "Dirección Ejecutiva", "Secretaría", "Unidad de Auditoría Interna", "Recursos Humanos",
                "Tecnología de la Información", "Finanzas", "Marketing", "Operaciones", "Ventas", "Logística" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(EmployeeNameTxt,
                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                                .addComponent(EmployeeLastNameTxt,
                                                        javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(EmployeeNameLabel)
                                                        .addComponent(EmployeeLastNameLabel)
                                                        .addComponent(StartDateLabel)
                                                        .addComponent(PositionLabel)
                                                        .addComponent(SalaryLabel)
                                                        .addComponent(EmployeeIdLabel)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(EmployeeIDTxt,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 80,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(SelectButton))
                                                        .addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.TRAILING,
                                                                        false)
                                                                .addComponent(HiringDateTxt,
                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(PositionTxt,
                                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE, 190,
                                                                        Short.MAX_VALUE))
                                                        .addComponent(StaffManagementLabel)
                                                        .addComponent(DepartmentLabel)
                                                        .addComponent(SalaryTxt, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(AddEmployeeButton,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(TerminationButton,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(CleanButton,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 150,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(DepartmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13,
                                        Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 770,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1)
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(StaffManagementLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(EmployeeIdLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(EmployeeIDTxt,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(SelectButton))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(EmployeeNameLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(EmployeeNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(EmployeeLastNameLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(EmployeeLastNameTxt,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(StartDateLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(HiringDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(9, 9, 9)
                                                .addComponent(PositionLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(PositionTxt, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(SalaryLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(SalaryTxt, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(DepartmentLabel)
                                                .addGap(7, 7, 7)
                                                .addComponent(DepartmentComboBox,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(AddEmployeeButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(UpdateButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(TerminationButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(CleanButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ReturnButtonActionPerformed
        // cerrar el form actual definitivamente
        this.dispose();
    }// GEN-LAST:event_ReturnButtonActionPerformed

    // FIXED: Update method to load employees using new Employee class
    private void loadEmployee() {
        Employee.getAll(); // Load all employees from database
        DefaultTableModel modelo = new DefaultTableModel();

        // Define table columns
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");
        modelo.addColumn("Fecha Contratación");
        modelo.addColumn("Cargo");
        modelo.addColumn("Salario");
        modelo.addColumn("Departamento");

        // Load employee data into table
        for (Employee empleado : Employee.employees) {
            Object[] fila = new Object[7];
            fila[0] = empleado.getId();
            fila[1] = empleado.getName();
            fila[2] = empleado.getLastName();
            fila[3] = empleado.getHiringDate();
            fila[4] = empleado.getPosition();
            fila[5] = String.format("Q %.2f", empleado.getSalary());
            fila[6] = empleado.getDepartment();
            modelo.addRow(fila);
        }

        jTable1.setModel(modelo);
        jTable1.setDefaultEditor(Object.class, null);
    }

    private void SelectButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_SelectButtonActionPerformed
        // Load selected employee information into form fields
        int fila = jTable1.getSelectedRow();
        if (fila >= 0) {
            EmployeeIDTxt.setText(jTable1.getValueAt(fila, 0).toString());
            EmployeeNameTxt.setText(jTable1.getValueAt(fila, 1).toString());
            EmployeeLastNameTxt.setText(jTable1.getValueAt(fila, 2).toString());
            HiringDateTxt.setText(jTable1.getValueAt(fila, 3).toString());
            PositionTxt.setText(jTable1.getValueAt(fila, 4).toString());
            // Remove "Q " from salary display for editing
            String salaryText = jTable1.getValueAt(fila, 5).toString().replace("Q ", "");
            SalaryTxt.setText(salaryText);
            DepartmentComboBox.setSelectedItem(jTable1.getValueAt(fila, 6).toString());
        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado un empleado.");
        }
    }// GEN-LAST:event_SelectButtonActionPerformed

    private void TerminationButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_TerminationButtonActionPerformed
        // Obtener el id del empleado
        if ("".equals(EmployeeIDTxt.getText()) || EmployeeIDTxt.getText() == null) {
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar un empleado para poder continuar con la eliminación",
                    "Error al obtener la información del empleado",
                    JOptionPane.OK_OPTION);
            return;
        }

        // Solicitar confirmacion de si desea eliminar al empleado
        int dialogResult = JOptionPane.showConfirmDialog(null, "¿Está seguro de que desea dar de baja a este empleado?",
                "Advertencia", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.NO_OPTION) {
            return;
        }

        int idEmpleado = Integer.parseInt(EmployeeIDTxt.getText());
        // Dar de baja al empleado
        boolean exito = Employee.delete(idEmpleado);

        // Si se ha eliminado exitosamente, se recargan los empleados en la tabla
        if (exito) {
            loadEmployee();
        } else {
            // Mostrar mensaje de error con un JOptionPane
            JOptionPane.showMessageDialog(this,
                    "No se pudo dar de baja al empleado. Intente de nuevo por favor.",
                    "Error al eliminar",
                    JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_TerminationButtonActionPerformed

    private void CleanButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CleanButtonActionPerformed
        // Limpiar todos los campos
        EmployeeIDTxt.setText("");
        EmployeeNameTxt.setText("");
        EmployeeLastNameTxt.setText("");
        HiringDateTxt.setText("");
        PositionTxt.setText("");
        SalaryTxt.setText("");
        DepartmentComboBox.setSelectedIndex(0);
    }// GEN-LAST:event_CleanButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_UpdateButtonActionPerformed
        // Confirm update operation
        int dialogResult = JOptionPane.showConfirmDialog(null,
                "¿Está seguro de que desea actualizar la información del empleado seleccionado?",
                "Confirmación de actualización",
                JOptionPane.YES_NO_OPTION);

        if (dialogResult == JOptionPane.NO_OPTION) {
            return;
        }

        // Validate selection
        int fila = jTable1.getSelectedRow();
        if (fila >= 0 && !EmployeeIDTxt.getText().equals("") && Integer.parseInt(EmployeeIDTxt.getText()) > 0) {
            // Get form data
            int idEmpleado = Integer.parseInt(EmployeeIDTxt.getText());
            String nombre = EmployeeNameTxt.getText();
            String apellido = EmployeeLastNameTxt.getText();
            String fechaContratacion = HiringDateTxt.getText();
            String cargo = PositionTxt.getText();
            String departamento = DepartmentComboBox.getSelectedItem().toString();
            double salario;

            // Validate required fields
            if ("".equals(nombre) || nombre == null) {
                JOptionPane.showMessageDialog(null, "No se ha ingresado el nombre del empleado.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            if ("".equals(apellido) || apellido == null) {
                JOptionPane.showMessageDialog(null, "No se ha ingresado el apellido del empleado.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            if ("".equals(fechaContratacion) || fechaContratacion == null) {
                JOptionPane.showMessageDialog(null, "No se ha ingresado la fecha de contratación.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // FIXED: Use Utils.validateDate instead of old validation
            if (!Utils.validateDate(fechaContratacion)) {
                JOptionPane.showMessageDialog(null, "La fecha de contratación no es válida. Use formato dd/MM/yyyy",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if ("".equals(cargo) || cargo == null) {
                JOptionPane.showMessageDialog(null, "No se ha ingresado el cargo del empleado.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (DepartmentComboBox.getSelectedIndex() <= 0) {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado el departamento.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate and parse salary
            try {
                salario = Double.parseDouble(SalaryTxt.getText());
                if (!Utils.validateSalary(salario)) {
                    JOptionPane.showMessageDialog(null, "El salario debe ser mayor que 0.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El salario ingresado no es válido.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Update employee using Employee.update() method
            boolean actualiza = Employee.update(idEmpleado, nombre, apellido, fechaContratacion, cargo, salario,
                    departamento);

            // Reload employee information
            if (actualiza) {
                JOptionPane.showMessageDialog(this, "Empleado actualizado exitosamente");
                Employee.getAll();
                loadEmployee();
            } else {
                JOptionPane.showMessageDialog(this, "No se ha podido actualizar el empleado.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado un empleado válido.");
        }
    }// GEN-LAST:event_UpdateButtonActionPerformed

    private void AddEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_AddEmployeeButtonActionPerformed
        // Obtener todos los datos de los campos
        String nombre = EmployeeNameTxt.getText();
        String apellido = EmployeeLastNameTxt.getText();
        String fechaContratacion = HiringDateTxt.getText();
        String cargo = PositionTxt.getText();
        String salarioStr = SalaryTxt.getText();
        Double salario = null;
        String departamento = DepartmentComboBox.getSelectedItem().toString();

        // validar campo por campo
        if (nombre.equals("") || apellido.equals("") || fechaContratacion.equals("") || cargo.equals("")
                || salarioStr.equals("") || departamento.equals("Seleccione una opción")) {
            JOptionPane.showMessageDialog(this,
                    "Todos los campos son obligatorios. Asegúrese de llenarlos todos.",
                    "Error en los campos",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Convertir el salario a un Double y eliminar la coma
        if (salarioStr.startsWith("Q")) {
            try {
                // Extraer la parte numérica y convertir a Double
                salario = Double.valueOf(salarioStr.substring(1).replace(",", "").trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this,
                        "El formato del salario es incorrecto. Asegúrese de que sea un número válido.",
                        "Error en el salario",
                        JOptionPane.ERROR_MESSAGE);
                return; // Salir del método si hay un error
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "El salario debe comenzar con 'Q'.",
                    "Error en el salario",
                    JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si hay un error
        }

        if (DepartmentComboBox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar una opcion para departamento.",
                    "Departamento no válido",
                    JOptionPane.OK_OPTION);
            return;
        }

        // Crear un nuevo empleado
        boolean exito = Employee.add(nombre, apellido, fechaContratacion, cargo, salario, departamento);

        if (exito) {
            JOptionPane.showMessageDialog(this, "Empleado agregado exitosamente");
            loadEmployee();
            CleanButtonActionPerformed(evt); // Clear fields after creation
        } else {
            JOptionPane.showMessageDialog(this,
                    "No se pudo agregar el empleado. Intente de nuevo por favor.",
                    "Error al insertar en la base de datos",
                    JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_AddEmployeeButtonActionPerformed

    // Bloquear la edición de las celdas en la tabla

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonalManagementForm.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonalManagementForm.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonalManagementForm.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonalManagementForm.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PersonalManagementForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddEmployeeButton;
    private javax.swing.JButton CleanButton;
    private javax.swing.JComboBox<String> DepartmentComboBox;
    private javax.swing.JLabel DepartmentLabel;
    private javax.swing.JTextField EmployeeIDTxt;
    private javax.swing.JLabel EmployeeIdLabel;
    private javax.swing.JLabel EmployeeLastNameLabel;
    private javax.swing.JTextField EmployeeLastNameTxt;
    private javax.swing.JLabel EmployeeNameLabel;
    private javax.swing.JTextField EmployeeNameTxt;
    private javax.swing.JFormattedTextField HiringDateTxt;
    private javax.swing.JLabel PositionLabel;
    private javax.swing.JTextField PositionTxt;
    private javax.swing.JButton ReturnButton;
    private javax.swing.JLabel SalaryLabel;
    private javax.swing.JFormattedTextField SalaryTxt;
    private javax.swing.JButton SelectButton;
    private javax.swing.JLabel StaffManagementLabel;
    private javax.swing.JLabel StartDateLabel;
    private javax.swing.JButton TerminationButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
