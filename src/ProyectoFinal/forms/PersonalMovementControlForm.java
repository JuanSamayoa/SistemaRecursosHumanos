package ProyectoFinal.forms;

import java.awt.event.ActionEvent;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ProyectoFinal.Employee;
import ProyectoFinal.PersonalMovement;
import ProyectoFinal.PersonalMovementsReport;

/**
 *
 * @author User
 */
@SuppressWarnings("this-escape")
public class PersonalMovementControlForm extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    public int idEncontrado;
    public transient Employee emp;

    /**
     * Creates new form ControlMovimientoPersonalForm
     */
    public PersonalMovementControlForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StaffMovementControlLabel = new javax.swing.JLabel();
        ReturnButton = new javax.swing.JButton();
        SearchEmployeeIdLabel = new javax.swing.JLabel();
        EmployeeIdTxt = new javax.swing.JTextField();
        SearchEmployeeButton = new javax.swing.JButton();
        EmployeeNameTxt = new javax.swing.JTextField();
        MovementTypeComboBox = new javax.swing.JComboBox<>();
        DepartmentComboBox = new javax.swing.JComboBox<>();
        MovementTypeButton = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        NewPositionTxt = new javax.swing.JTextField();
        NewPositionLabel = new javax.swing.JLabel();
        MakeTransitionButton = new javax.swing.JButton();
        PositionTxt = new javax.swing.JTextField();
        SalaryLabel = new javax.swing.JLabel();
        NewSalaryTxt = new javax.swing.JFormattedTextField();
        PositionLabel = new javax.swing.JLabel();
        NewMovementLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        LoadRecentMovementsButton = new javax.swing.JButton();
        CleanButton = new javax.swing.JButton();
        getAllMovementsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        StaffMovementControlLabel.setFont(new java.awt.Font("Eras Medium ITC", 0, 18)); // NOI18N
        StaffMovementControlLabel.setText("Control de Movimiento del Personal");

        ReturnButton.setText("Regresar al Menú Principal");
        ReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnButtonActionPerformed(evt);
            }
        });

        SearchEmployeeIdLabel.setText("Buscar empleado");

        EmployeeIdTxt.setToolTipText("Ej: 23");
        EmployeeIdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmployeeIdTxtActionPerformed(evt);
            }
        });

        SearchEmployeeButton.setText("Buscar empleado");
        SearchEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchEmployeeButtonActionPerformed(evt);
            }
        });

        EmployeeNameTxt.setEditable(false);

        MovementTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selección una opción",
                "Promoción", "Transferencia", "Cambio de puesto", "Ascenso", "Reasignación" }));
        MovementTypeComboBox.setEnabled(false);

        DepartmentComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opción",
                "Dirección Ejecutiva", "Secretaría", "Unidad de Auditoría Interna", "Recursos Humanos",
                "Tecnología de la Información", "Finanzas", "Marketing", "Operaciones", "Ventas", "Logística" }));
        DepartmentComboBox.setEnabled(false);

        MovementTypeButton.setText("Tipo de movimiento de personal:");

        jLabel1.setText("Departamento a mover:");

        NewPositionTxt.setEnabled(false);

        NewPositionLabel.setText("Nuevo puesto:");

        MakeTransitionButton.setText("Gestionar cambio");
        MakeTransitionButton.setEnabled(false);
        MakeTransitionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeTransitionButtonActionPerformed(evt);
            }
        });

        PositionTxt.setEditable(false);

        SalaryLabel.setText("Nuevo salario: (QXXXX.XX)");

        NewSalaryTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
                new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));
        NewSalaryTxt.setEnabled(false);

        PositionLabel.setText("Cargo actual:");

        NewMovementLabel.setFont(new java.awt.Font("Eras Medium ITC", 0, 18)); // NOI18N
        NewMovementLabel.setText("Nuevo movimiento");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null }
                },
                new String[] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }));
        jScrollPane1.setViewportView(jTable1);

        LoadRecentMovementsButton.setText("Consultar movimientos recientes");
        LoadRecentMovementsButton.setEnabled(false);
        LoadRecentMovementsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadRecentMovementsButtonActionPerformed(evt);
            }
        });

        CleanButton.setText("Limpiar");
        CleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanButtonActionPerformed(evt);
            }
        });

        getAllMovementsButton.setText("Obtener todos los movimientos");
        getAllMovementsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllMovementsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(DepartmentComboBox,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 224,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                                        false)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addGroup(layout.createParallelGroup(
                                                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                                                false)
                                                                                .addComponent(EmployeeIdTxt)
                                                                                .addComponent(SearchEmployeeIdLabel))
                                                                        .addPreferredGap(
                                                                                javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(SearchEmployeeButton))
                                                                .addComponent(EmployeeNameTxt)
                                                                .addComponent(PositionLabel)
                                                                .addComponent(PositionTxt))
                                                        .addComponent(MovementTypeButton)
                                                        .addComponent(MovementTypeComboBox,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 223,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(NewPositionLabel)
                                                        .addComponent(NewPositionTxt,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 223,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(SalaryLabel)
                                                        .addComponent(NewSalaryTxt,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 224,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1)
                                                        .addComponent(NewMovementLabel)
                                                        .addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.TRAILING,
                                                                        false)
                                                                .addComponent(CleanButton,
                                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(MakeTransitionButton,
                                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane1)
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addComponent(LoadRecentMovementsButton,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 230,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(getAllMovementsButton,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 207,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(412, 412, 412)
                                .addComponent(StaffMovementControlLabel)
                                .addContainerGap(297, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(StaffMovementControlLabel)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(LoadRecentMovementsButton,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 52,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGap(36, 36, 36)
                                                        .addComponent(SearchEmployeeIdLabel)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(EmployeeIdTxt,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(SearchEmployeeButton))
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(EmployeeNameTxt,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGap(57, 57, 57)
                                                        .addComponent(getAllMovementsButton,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PositionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(PositionTxt, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(NewMovementLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(MovementTypeButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(MovementTypeComboBox,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(NewPositionLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(NewPositionTxt, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(SalaryLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(NewSalaryTxt, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(DepartmentComboBox,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(MakeTransitionButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(CleanButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21,
                                                        Short.MAX_VALUE)
                                                .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0,
                                                Short.MAX_VALUE))
                                .addContainerGap()));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public static boolean validarFecha(String fecha) {
        try {
            String[] fechaPartes = fecha.split("/");
            int dia = Integer.parseInt(fechaPartes[0]);
            int mes = Integer.parseInt(fechaPartes[1]);
            int anio = Integer.parseInt(fechaPartes[2]);
            if (dia < 1 || dia > 31 || mes < 1 || mes > 12 || anio < 1900) {
                return false;
            }
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public static boolean validarFechaActual(String fecha) {
        try {
            String[] fechaPartes = fecha.split("/");
            // Variables used for validation
            int anio = Integer.parseInt(fechaPartes[2]);
            if (anio < 2021) {
                return false;
            }
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    private void ReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ReturnButtonActionPerformed
        // cerrar el form actual definitivamente
        this.dispose();
    }// GEN-LAST:event_ReturnButtonActionPerformed

    private void SearchEmployeeButtonActionPerformed(ActionEvent evt) {// GEN-FIRST:event_SearchEmployeeButtonActionPerformed
        // Validar haya ingresado un dato en el campo
        if ("".equals(EmployeeIdTxt.getText()) || EmployeeIdTxt.getText() == null) {
            JOptionPane.showMessageDialog(this,
                    "Debe ingresar un número",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            EmployeeNameTxt.setText("");
            PositionTxt.setText("");
            idEncontrado = 0;
            LoadRecentMovementsButton.setEnabled(false);
            MovementTypeComboBox.setEnabled(false);
            NewPositionTxt.setEnabled(false);
            NewSalaryTxt.setEnabled(false);
            DepartmentComboBox.setEnabled(false);
            MakeTransitionButton.setEnabled(false);
            return;
        }
        if (Employee.getEmployees() == null || Employee.getEmployees().isEmpty()) {
            Employee.getAll();
        }
        // Buscar empleado por id
        int idEmpleado = Integer.parseInt(EmployeeIdTxt.getText());
        emp = Employee.getEmployeeInformation(idEmpleado);
        if (emp == null) {
            JOptionPane.showMessageDialog(this,
                    "No se encontró el empleado con ese ID.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            EmployeeNameTxt.setText("");
            PositionTxt.setText("");
            idEncontrado = 0;
            LoadRecentMovementsButton.setEnabled(false);
            MovementTypeComboBox.setEnabled(false);
            NewPositionTxt.setEnabled(false);
            NewSalaryTxt.setEnabled(false);
            DepartmentComboBox.setEnabled(false);
            MakeTransitionButton.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Empleado encontrado: " + emp.getName() + " " + emp.getLastName(),
                    "Exito",
                    JOptionPane.INFORMATION_MESSAGE);
            EmployeeNameTxt.setText(emp.getName() + " " + emp.getLastName());
            idEncontrado = idEmpleado;
            PositionTxt.setText(emp.getPosition());

            LoadRecentMovementsButton.setEnabled(true);
            MovementTypeComboBox.setEnabled(true);
            NewPositionTxt.setEnabled(true);
            NewSalaryTxt.setEnabled(true);
            DepartmentComboBox.setEnabled(true);
            MakeTransitionButton.setEnabled(true);
        }
    }// GEN-LAST:event_SearchEmployeeButtonActionPerformed

    private void LoadRecentMovementsButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_LoadRecentMovementsButtonActionPerformed
        // Obtener acciones recientes
        ArrayList<PersonalMovement> movimientos = PersonalMovement.getEmployeeMovements(idEncontrado);

        if (movimientos == null || movimientos.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Error al consultar las acciones.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Crear un modelo de tabla
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Tipo");
        model.addColumn("Fecha");
        model.addColumn("Detalle");

        // Agregar las acciones al modelo de tabla
        for (PersonalMovement movimiento : movimientos) {
            // Crear un arreglo de objetos para agregar a la tabla
            Object[] row = new Object[4];
            row[0] = movimiento.getId();
            row[1] = movimiento.getMovementType();
            row[2] = movimiento.getMovementDate();
            row[3] = movimiento.getDetail();
            model.addRow(row);
        }

        // Mostrar las acciones en la tabla
        jTable1.setModel(model);

        // Bloquear la edición de las celdas en la tabla
        jTable1.setDefaultEditor(Object.class, null);
    }// GEN-LAST:event_LoadRecentMovementsButtonActionPerformed

    private void MakeTransitionButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_MakeTransitionButtonActionPerformed
        try {
            // Validar haya ingresado un dato en el campo
            if ("".equals(NewPositionTxt.getText()) || NewPositionTxt.getText() == null) {
                JOptionPane.showMessageDialog(this,
                        "Debe ingresar un nuevo puesto",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Validar haya ingresado un dato en el campo
            if ("".equals(NewSalaryTxt.getText()) || NewSalaryTxt.getText() == null) {
                JOptionPane.showMessageDialog(this,
                        "Debe ingresar un nuevo salario",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Validar haya ingresido un dato en el campo
            if (DepartmentComboBox.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this,
                        "Debe seleccionar un departamento",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Validar haya ingresido un dato en el campo
            if (MovementTypeComboBox.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this,
                        "Debe seleccionar un tipo de movimiento",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Validar que el nuevo salario sea mayor al actual
            double salarioActual = Double.parseDouble(NewSalaryTxt.getText().replace("Q", "").replace(",", "").trim());
            double salarioAnterior = Employee.getEmployeeInformation(idEncontrado).getSalary();
            if (salarioActual <= salarioAnterior) {
                JOptionPane.showMessageDialog(this,
                        "El nuevo salario debe ser mayor al actual",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Preguntar si desea realizar el cambio
            int dialogResult = JOptionPane.showConfirmDialog(this,
                    "¿Está seguro que desea realizar el cambio?",
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }
            String fecha = JOptionPane.showInputDialog(this, "Ingrese la fecha del movimiento (dd/mm/yyyy):");
            // Validar haya ingresido un dato en el campo
            if ("".equals(fecha) || fecha == null) {
                JOptionPane.showMessageDialog(this,
                        "Debe ingresar una fecha",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Validar que la fecha sea válida
            if (!validarFecha(fecha)) {
                JOptionPane.showMessageDialog(this,
                        "La fecha ingresada no es válida",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Validar que la fecha sea mayor a la actual
            if (!validarFechaActual(fecha)) {
                JOptionPane.showMessageDialog(this,
                        "La fecha ingresada no puede ser menor a la actual",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            int idEmpleado = idEncontrado;
            String nuevoPuesto = NewPositionTxt.getText();
            String departamento = DepartmentComboBox.getSelectedItem().toString();
            String tipoMovimiento = MovementTypeComboBox.getSelectedItem().toString();

            String input = NewSalaryTxt.getText();
            String sanitizedInput = input.replace("Q", "").replace(",", "").trim();
            double nuevoSalario = Double.parseDouble(sanitizedInput);
            System.out.println(nuevoSalario);

            // Crear un nuevo movimiento
            boolean exito = PersonalMovement.add(idEmpleado, tipoMovimiento, fecha,
                    "Movimiento de empleado a " + nuevoPuesto + " en " + departamento);

            // Convert hiring date from ISO format to dd/MM/yyyy format for
            // Employee.update()
            String hiringDateFormatted = ProyectoFinal.Utils.convertToStandardDate(emp.getHiringDate());
            boolean exito2 = Employee.update(idEmpleado, emp.getName(), emp.getLastName(), hiringDateFormatted,
                    nuevoPuesto, nuevoSalario, departamento);
            if (exito && exito2) {
                JOptionPane.showMessageDialog(this,
                        "El movimiento se ha registrado con éxito",
                        "Exito",
                        JOptionPane.INFORMATION_MESSAGE);
            } else if (exito && !exito2) {
                JOptionPane.showMessageDialog(this,
                        "El empleado no ha podido ser actualizado",
                        "Error al actualizar",
                        JOptionPane.ERROR_MESSAGE);
            } else if (!exito && exito2) {
                JOptionPane.showMessageDialog(this,
                        "El movimiento no ha podido ser creado",
                        "Error al crear",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Ha fallado el sistema al crear y actualizar la información",
                        "Error fatal",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(PersonalMovementControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_MakeTransitionButtonActionPerformed

    private void CleanButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CleanButtonActionPerformed
        // Limpiar todos los campos
        EmployeeIdTxt.setText("");
        EmployeeNameTxt.setText("");
        MovementTypeComboBox.setSelectedIndex(0);
        DepartmentComboBox.setSelectedIndex(0);
        NewPositionTxt.setText("");
        NewSalaryTxt.setText("");
        PositionTxt.setText("");
    }// GEN-LAST:event_CleanButtonActionPerformed

    private void EmployeeIdTxtActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_EmployeeIdTxtActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_EmployeeIdTxtActionPerformed

    private void getAllMovementsButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_getAllMovementsButtonActionPerformed
        try {
            // limpiar todos los datos de la tabla
            DefaultTableModel model = new DefaultTableModel();
            jTable1.setModel(model);
            // obtener todos los movement
            ArrayList<PersonalMovementsReport> movement;
            movement = PersonalMovementsReport.generatePersonalMovementsReport("01/01/1999", "31/12/2040");
            if (movement == null || movement.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "Error al consultar las acciones.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Crear un modelo de tabla
            model.addColumn("ID Movimiento");
            model.addColumn("ID Empleado");
            model.addColumn("Tipo de movimiento");
            model.addColumn("Fecha");
            model.addColumn("Detalle");

            // Agregar las acciones al modelo de tabla
            for (PersonalMovementsReport movementsReport : movement) {
                // Crear un arreglo de objetos para agregar a la tabla
                Object[] row = new Object[5];
                row[0] = movementsReport.getMovementId();
                row[1] = movementsReport.getEmployeeId();
                row[2] = movementsReport.getMovementType();
                row[3] = movementsReport.getMovementDate();
                row[4] = movementsReport.getMovementDetail();
                model.addRow(row);
            }

            // Mostrar las acciones en la tabla
            jTable1.setModel(model);
        } catch (ParseException ex) {
            Logger.getLogger(PersonalMovementControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }// GEN-LAST:event_getAllMovementsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonalMovementControlForm.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonalMovementControlForm.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonalMovementControlForm.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonalMovementControlForm.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PersonalMovementControlForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CleanButton;
    private javax.swing.JComboBox<String> DepartmentComboBox;
    private javax.swing.JTextField EmployeeIdTxt;
    private javax.swing.JTextField EmployeeNameTxt;
    private javax.swing.JButton LoadRecentMovementsButton;
    private javax.swing.JButton MakeTransitionButton;
    private javax.swing.JLabel MovementTypeButton;
    private javax.swing.JComboBox<String> MovementTypeComboBox;
    private javax.swing.JLabel NewMovementLabel;
    private javax.swing.JLabel NewPositionLabel;
    private javax.swing.JTextField NewPositionTxt;
    private javax.swing.JFormattedTextField NewSalaryTxt;
    private javax.swing.JLabel PositionLabel;
    private javax.swing.JTextField PositionTxt;
    private javax.swing.JButton ReturnButton;
    private javax.swing.JLabel SalaryLabel;
    private javax.swing.JButton SearchEmployeeButton;
    private javax.swing.JLabel SearchEmployeeIdLabel;
    private javax.swing.JLabel StaffMovementControlLabel;
    private javax.swing.JButton getAllMovementsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
