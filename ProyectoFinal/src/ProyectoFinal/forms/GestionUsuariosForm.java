package ProyectoFinal.forms;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ProyectoFinal.Usuario;

/**
 *
 * @author User
 */
public class GestionUsuariosForm extends javax.swing.JFrame {

    /**
     * Creates new form GestionUsuariosForm
     */
    public GestionUsuariosForm() {
        initComponents();
        cargarUsuarios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StaffManagementGrid = new javax.swing.JScrollPane();
        StaffManagementTable = new javax.swing.JTable();
        ReturnButton = new javax.swing.JButton();
        UserManagementLabel = new javax.swing.JLabel();
        UserIdTxt = new javax.swing.JTextField();
        UserNameTxt = new javax.swing.JTextField();
        FullNameTxt = new javax.swing.JTextField();
        EmailTxt = new javax.swing.JTextField();
        PhoneNumberTxt = new javax.swing.JTextField();
        UserTypeComboBox = new javax.swing.JComboBox<>();
        UpdateButton = new javax.swing.JButton();
        LoadButton = new javax.swing.JButton();
        UserIdLabel = new javax.swing.JLabel();
        UserNameLabel = new javax.swing.JLabel();
        FullNameLabel = new javax.swing.JLabel();
        EmailLabel = new javax.swing.JLabel();
        PhoneNumberLabel = new javax.swing.JLabel();
        UserTypeLabel = new javax.swing.JLabel();
        CleanButton = new javax.swing.JButton();
        TerminationButton = new javax.swing.JButton();
        CreateUserButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        StaffManagementTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        StaffManagementTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        StaffManagementTable.setShowGrid(true);
        StaffManagementTable.setShowVerticalLines(false);
        StaffManagementTable.setUpdateSelectionOnSort(false);
        StaffManagementTable.setVerifyInputWhenFocusTarget(false);
        StaffManagementGrid.setViewportView(StaffManagementTable);

        ReturnButton.setText("Regresar al Menú Principal");
        ReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnButtonActionPerformed(evt);
            }
        });

        UserManagementLabel.setFont(new java.awt.Font("Eras Medium ITC", 0, 18)); // NOI18N
        UserManagementLabel.setText("Gestión de Usuarios");

        UserIdTxt.setEditable(false);
        UserIdTxt.setToolTipText("ID Usuario");
        UserIdTxt.setFocusable(false);
        UserIdTxt.setHighlighter(null);

        UserNameTxt.setToolTipText("Ej: PedroPerez");

        FullNameTxt.setToolTipText("Ej: Pedro Alberto Martinez");

        EmailTxt.setToolTipText("Ej: pedro@rrhh.com");

        PhoneNumberTxt.setToolTipText("Ej: 50502020");

        UserTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opción", "Administrador", "Reclutador", "Operador" }));
        UserTypeComboBox.setToolTipText("");

        UpdateButton.setText("Modificar información");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        LoadButton.setText("Seleccionar usuario");
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });

        UserIdLabel.setText("ID del Usuario:");

        UserNameLabel.setText("Nombre de usuario:");

        FullNameLabel.setText("Nombre completo:");

        EmailLabel.setText("Correo electrónico:");

        PhoneNumberLabel.setText("No. de teléfono:");

        UserTypeLabel.setText("Tipo de usuario:");

        CleanButton.setText("Limpiar campos");
        CleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanButtonActionPerformed(evt);
            }
        });

        TerminationButton.setText("Dar de baja (Eliminar)");
        TerminationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TerminationButtonActionPerformed(evt);
            }
        });

        CreateUserButton.setText("Crear Usuario");
        CreateUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateUserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ReturnButton, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                        .addComponent(UserTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PhoneNumberTxt)
                        .addComponent(EmailTxt)
                        .addComponent(FullNameTxt)
                        .addComponent(UserManagementLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UserIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(UserNameTxt))
                    .addComponent(UserIdLabel)
                    .addComponent(UserNameLabel)
                    .addComponent(FullNameLabel)
                    .addComponent(EmailLabel)
                    .addComponent(PhoneNumberLabel)
                    .addComponent(UserTypeLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(CleanButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TerminationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LoadButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CreateUserButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(StaffManagementGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UserManagementLabel)
                        .addGap(19, 19, 19)
                        .addComponent(UserIdLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UserIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UserNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UserNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FullNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FullNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EmailLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EmailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PhoneNumberLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PhoneNumberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UserTypeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UserTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CreateUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LoadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UpdateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TerminationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CleanButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(StaffManagementGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnButtonActionPerformed
        //cerrar el form actual definitivamente
        this.dispose();
    }//GEN-LAST:event_ReturnButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        //Solicitar confirmacion de si desea eliminar al empleado
        int dialogResult = JOptionPane.showConfirmDialog (null, "¿Está seguro de que desea actualizar la informaciónd del usuario seleccionado?","Advertencia",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.NO_OPTION){
            return;
        }
        
        //Actualizar la informacion del usuario seleccionado
        int fila = StaffManagementTable.getSelectedRow();
        if(fila >= 0 && Integer.parseInt(UserIdTxt.getText()) > 0){
            //obtener los datos ingresados
            int idUsuario = Integer.parseInt(UserIdTxt.getText());
            String nombreUsuario = UserNameTxt.getText();
            String nombreCompleto = FullNameTxt.getText();
            String correoElectronico = EmailTxt.getText();
            String telefono = PhoneNumberTxt.getText();
            String tipoUsuario = UserTypeComboBox.getSelectedItem().toString();
            String contrasena = JOptionPane.showInputDialog("Ingrese la contraseña del usuario:");
            
            if("".equals(nombreUsuario) || nombreUsuario == null){
            JOptionPane.showMessageDialog(null, "No se ha ingresado el nombre de usuario.", "Error al obtener nombre de usuario", JOptionPane.ERROR_MESSAGE);
            return;
            }
        
            if("".equals(nombreCompleto) || nombreCompleto == null){
                JOptionPane.showMessageDialog(null, "No se ha ingresado el nombre completo.", "Error al obtener nombre", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if("".equals(correoElectronico) || correoElectronico == null){
                JOptionPane.showMessageDialog(null, "No se ha ingresado el correo electrónico.", "Error al obtener correo electrónico", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(!Usuario.validarCorreoElectronico(correoElectronico)){
                JOptionPane.showMessageDialog(null, "El correo electrónico ingresado no es válido.", "Error en formato de correo electrónico", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if("".equals(telefono) || telefono == null){
                JOptionPane.showMessageDialog(null, "No se ha ingresado el número de teléfono.", "Error al obtener número telefónico", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(!Usuario.validarTelefono(telefono)){
                JOptionPane.showMessageDialog(null, "El número de teléfono ingresado no es válido.", "Error en formato de número telefónico", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(UserTypeComboBox.getSelectedIndex() < 0){
                JOptionPane.showMessageDialog(null, "No se ha seleccionado el tipo de usuario.", "Error al obtener tipo de usuario", JOptionPane.ERROR_MESSAGE);
                return; 
            }

            if("".equals(contrasena) || contrasena == null){
                JOptionPane.showMessageDialog(null, "No se ha ingresado la contraseña.", "Error al obtener la contraseña", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //Actualizar los datos
            boolean actualiza = Usuario.actualizarUsuario(idUsuario, nombreUsuario, nombreCompleto, correoElectronico, telefono, contrasena, tipoUsuario);
            
            //recargar la informacion de los usuarios
            if(actualiza){
                JOptionPane.showMessageDialog(this, "Usuario actualizado exitosamente");
                Usuario.obtenerTodosLosUsuarios();
                cargarUsuarios();    
            } else {
                JOptionPane.showMessageDialog(this, "No se ha podido actualizar el usuario");
            }
        } else{
            //Mostrar un mensaje si no se ha seleccionado ninguna fila
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila.", "Error al obtener la información del empleado", JOptionPane.ERROR_MESSAGE);
            System.out.println("No se ha seleccionado ninguna fila.");
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed
        int fila = StaffManagementTable.getSelectedRow();
        if(fila >= 0){
            UserIdTxt.setText(StaffManagementTable.getValueAt(fila, 0).toString());
            UserNameTxt.setText(StaffManagementTable.getValueAt(fila, 1).toString());
            FullNameTxt.setText(StaffManagementTable.getValueAt(fila, 2).toString());
            EmailTxt.setText(StaffManagementTable.getValueAt(fila, 3).toString());
            PhoneNumberTxt.setText(StaffManagementTable.getValueAt(fila, 4).toString());
            //seleccionar el tipo de usuario en el combobox que coincida con el usuario y seleccionar el tipo de usuario
            String tipoUsuario = StaffManagementTable.getValueAt(fila, 5).toString().toLowerCase();
            
            switch(tipoUsuario){
                case "administrador" -> UserTypeComboBox.setSelectedIndex(1);
                case "operador" -> UserTypeComboBox.setSelectedIndex(3);
                case "reclutador" -> UserTypeComboBox.setSelectedIndex(2);
            }
        }else{
            //Mostrar un mensaje si no se ha seleccionado ninguna fila
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna usuario para modificar", "Error al obtener la informacion del usuario", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_LoadButtonActionPerformed

    private void CleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleanButtonActionPerformed
        UserIdTxt.setText("");
        UserNameTxt.setText("");
        FullNameTxt.setText("");
        EmailTxt.setText("");
        PhoneNumberTxt.setText("");
        UserTypeComboBox.setSelectedIndex(0);

        //limpiar seleccion en la tabla
        StaffManagementTable.clearSelection();
    }//GEN-LAST:event_CleanButtonActionPerformed

    private void TerminationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TerminationButtonActionPerformed
        //Solicitar confirmacion de si desea eliminar al empleado
        int dialogResult = JOptionPane.showConfirmDialog (null, "¿Está seguro de que desea eliminar al usuario?","Advertencia",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.NO_OPTION){
            return;
        }
        
        // Eliminar el usuario en los campos
        int fila = StaffManagementTable.getSelectedRow();
        if(!UserIdTxt.getText().equals("") && fila >= 0){
            int idUsuario = Integer.parseInt(UserIdTxt.getText());
            if(Usuario.eliminarUsuario(idUsuario)){
                JOptionPane.showMessageDialog(this, "Usuario eliminado correctamente");
                Usuario.obtenerTodosLosUsuarios();
                cargarUsuarios();    
            } else {
                JOptionPane.showMessageDialog(this, "No se ha podido eliminar el usuario seleccionado.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado un usuario.");
        }
    }//GEN-LAST:event_TerminationButtonActionPerformed

    private void CreateUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateUserButtonActionPerformed
        //Solicitar confirmacion de si desea eliminar al empleado
        int dialogResult = JOptionPane.showConfirmDialog (null, "¿Deseas crear el usuario con la información ingresada?","Información",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.NO_OPTION){
            return;
        }
        
        // Crear un nuevo usuario con la informacion ingresada y solicitar la contraseña por medio de un JOptionPane
        String nombreUsuario = UserNameTxt.getText();
        String nombreCompleto = FullNameTxt.getText();
        String correoElectronico = EmailTxt.getText();
        String telefono = PhoneNumberTxt.getText();
        String tipoUsuario = UserTypeComboBox.getSelectedItem().toString();
        String contrasena = JOptionPane.showInputDialog("Ingrese la contraseña del usuario:");
        
        if("".equals(nombreUsuario) || nombreUsuario == null){
            JOptionPane.showMessageDialog(null, "No se ha ingresado el nombre de usuario.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if("".equals(nombreCompleto) || nombreCompleto == null){
            JOptionPane.showMessageDialog(null, "No se ha ingresado el nombre completo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if("".equals(correoElectronico) || correoElectronico == null){
            JOptionPane.showMessageDialog(null, "No se ha ingresado el correo electrónico.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if(!Usuario.validarCorreoElectronico(correoElectronico)){
            JOptionPane.showMessageDialog(null, "El correo electrónico ingresado no es válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if("".equals(telefono) || telefono == null){
            JOptionPane.showMessageDialog(null, "No se ha ingresado el número de teléfono.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if(!Usuario.validarTelefono(telefono)){
            JOptionPane.showMessageDialog(null, "El número de teléfono ingresado no es válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(UserTypeComboBox.getSelectedIndex() < 0){
            JOptionPane.showMessageDialog(null, "No se ha seleccionado el tipo de usuario.", "Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        if("".equals(contrasena) || contrasena == null){
            JOptionPane.showMessageDialog(null, "No se ha ingresado la contraseña.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        boolean crear = Usuario.crearUsuario(nombreUsuario, nombreCompleto, correoElectronico, telefono, contrasena, tipoUsuario);
        //Crea usuario y lo agrega a la lista de nuevos usuarios
        if(crear){
            JOptionPane.showMessageDialog(this, "Usuario creado exitosamente");
            Usuario.obtenerTodosLosUsuarios();
            cargarUsuarios();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo crear el usuario");
        }
    }//GEN-LAST:event_CreateUserButtonActionPerformed

    //metodo para cargar la informacion de los usuarios en la tabla
    private void cargarUsuarios(){
        //se obtiene la informacion de los usuarios
        ArrayList<Usuario> usuarios = Usuario.getUsuarios();
        //se crea un modelo de tabla
        DefaultTableModel modelo = new DefaultTableModel();
        //se agregan las columnas
        modelo.addColumn("ID");
        modelo.addColumn("Nombre de Usuario");
        modelo.addColumn("Nombre Completo");
        modelo.addColumn("Correo Electrónico");
        modelo.addColumn("Teléfono");
        modelo.addColumn("Tipo de Usuario");
        //se recorre la lista de usuarios
        for (Usuario usuario : usuarios) {
            //se crea un arreglo de objetos
            Object[] fila = new Object[6];
            //se asignan los valores
            fila[0] = usuario.getIdUsuario();
            fila[1] = usuario.getNombreUsuario();
            fila[2] = usuario.getNombreCompleto();
            fila[3] = usuario.getCorreoElectronico();
            fila[4] = usuario.getTelefono();
            fila[5] = usuario.getTipoUsuario();
            //se agrega la fila al modelo
            modelo.addRow(fila);
        }
        //se asigna el modelo a la tabla
        StaffManagementTable.setModel(modelo);

        //bloquear la edicion de las celdas en la tabla
        for (int i = 0; i < StaffManagementTable.getColumnCount(); i++) {
            Class<?> col_class = StaffManagementTable.getColumnClass(i);
            StaffManagementTable.setDefaultEditor(col_class, null);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionUsuariosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionUsuariosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionUsuariosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionUsuariosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionUsuariosForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CleanButton;
    private javax.swing.JButton CreateUserButton;
    private javax.swing.JLabel EmailLabel;
    private javax.swing.JTextField EmailTxt;
    private javax.swing.JLabel FullNameLabel;
    private javax.swing.JTextField FullNameTxt;
    private javax.swing.JButton LoadButton;
    private javax.swing.JLabel PhoneNumberLabel;
    private javax.swing.JTextField PhoneNumberTxt;
    private javax.swing.JButton ReturnButton;
    private javax.swing.JScrollPane StaffManagementGrid;
    private javax.swing.JTable StaffManagementTable;
    private javax.swing.JButton TerminationButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel UserIdLabel;
    private javax.swing.JTextField UserIdTxt;
    private javax.swing.JLabel UserManagementLabel;
    private javax.swing.JLabel UserNameLabel;
    private javax.swing.JTextField UserNameTxt;
    private javax.swing.JComboBox<String> UserTypeComboBox;
    private javax.swing.JLabel UserTypeLabel;
    // End of variables declaration//GEN-END:variables
}
