package ProyectoFinal.forms;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ProyectoFinal.Empleado;
import ProyectoFinal.AccionPersonal;

/**
 *
 * @author User
 */
public class ControlAccionPersonalForm extends javax.swing.JFrame {
    public int idEncontrado;

    /**
     * Creates new form ControlAccionPersonalForm
     */
    public ControlAccionPersonalForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StaffControlActionLabel = new javax.swing.JLabel();
        ReturnButton = new javax.swing.JButton();
        UnpaidLeaveButton = new javax.swing.JButton();
        SpouseDeathLeaveButton = new javax.swing.JButton();
        ParentalLeaveButton = new javax.swing.JButton();
        SickLeaveButton = new javax.swing.JButton();
        ParentalDeathLeaveButton = new javax.swing.JButton();
        MaternityLeaveButton = new javax.swing.JButton();
        PrivateExamenLicenseButton = new javax.swing.JButton();
        SupervisedPracticeLicenseButton = new javax.swing.JButton();
        AbsenceButton = new javax.swing.JButton();
        VacationsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        LoadRecentActionsButton = new javax.swing.JButton();
        SearchEmployeeIdLabel = new javax.swing.JLabel();
        EmployeeIdTxt = new javax.swing.JTextField();
        SearchEmployeeButton = new javax.swing.JButton();
        EmployeeNameTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        StaffControlActionLabel.setFont(new java.awt.Font("Eras Medium ITC", 0, 18)); // NOI18N
        StaffControlActionLabel.setText("Control de Acciones del Personal");

        ReturnButton.setText("Regresar al Menú Principal");
        ReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnButtonActionPerformed(evt);
            }
        });

        UnpaidLeaveButton.setText("Permiso sin goce de salario");
        UnpaidLeaveButton.setEnabled(false);
        UnpaidLeaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnpaidLeaveButtonActionPerformed(evt);
            }
        });

        SpouseDeathLeaveButton.setText("Permiso por fallecimiento de cónyuge");
        SpouseDeathLeaveButton.setEnabled(false);
        SpouseDeathLeaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpouseDeathLeaveButtonActionPerformed(evt);
            }
        });

        ParentalLeaveButton.setText("Permiso por nacimiento de hijos");
        ParentalLeaveButton.setEnabled(false);
        ParentalLeaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParentalLeaveButtonActionPerformed(evt);
            }
        });

        SickLeaveButton.setText("Permiso por enfermedad");
        SickLeaveButton.setEnabled(false);
        SickLeaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SickLeaveButtonActionPerformed(evt);
            }
        });

        ParentalDeathLeaveButton.setText("Permiso por fallecimiento de padres");
        ParentalDeathLeaveButton.setEnabled(false);
        ParentalDeathLeaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParentalDeathLeaveButtonActionPerformed(evt);
            }
        });

        MaternityLeaveButton.setText("Licencia por maternidad");
        MaternityLeaveButton.setEnabled(false);
        MaternityLeaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaternityLeaveButtonActionPerformed(evt);
            }
        });

        PrivateExamenLicenseButton.setText("Licencia por examen privado");
        PrivateExamenLicenseButton.setEnabled(false);
        PrivateExamenLicenseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrivateExamenLicenseButtonActionPerformed(evt);
            }
        });

        SupervisedPracticeLicenseButton.setText("Licencia para EPS");
        SupervisedPracticeLicenseButton.setEnabled(false);
        SupervisedPracticeLicenseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupervisedPracticeLicenseButtonActionPerformed(evt);
            }
        });

        AbsenceButton.setText("Ausencia");
        AbsenceButton.setEnabled(false);
        AbsenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbsenceButtonActionPerformed(evt);
            }
        });

        VacationsButton.setText("Vacaciones");
        VacationsButton.setEnabled(false);
        VacationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VacationsButtonActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        LoadRecentActionsButton.setText("Consultar acciones recientes");
        LoadRecentActionsButton.setEnabled(false);
        LoadRecentActionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadRecentActionsButtonActionPerformed(evt);
            }
        });

        SearchEmployeeIdLabel.setText("Buscar empleado");

        EmployeeIdTxt.setToolTipText("Ej: 23");

        SearchEmployeeButton.setText("Buscar empleado");
        SearchEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchEmployeeButtonActionPerformed(evt);
            }
        });

        EmployeeNameTxt.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SpouseDeathLeaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UnpaidLeaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ParentalLeaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SickLeaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ParentalDeathLeaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MaternityLeaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PrivateExamenLicenseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SupervisedPracticeLicenseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(VacationsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AbsenceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(246, 246, 246)
                                .addComponent(StaffControlActionLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(EmployeeIdTxt)
                                    .addComponent(SearchEmployeeIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SearchEmployeeButton)
                                .addGap(75, 75, 75)
                                .addComponent(LoadRecentActionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(EmployeeNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StaffControlActionLabel)
                .addGap(37, 37, 37)
                .addComponent(SearchEmployeeIdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EmployeeIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchEmployeeButton)
                    .addComponent(LoadRecentActionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EmployeeNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(UnpaidLeaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SpouseDeathLeaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ParentalLeaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SickLeaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ParentalDeathLeaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MaternityLeaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PrivateExamenLicenseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SupervisedPracticeLicenseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VacationsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AbsenceButton)
                        .addGap(18, 18, 18)
                        .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnButtonActionPerformed
        //cerrar el form actual definitivamente
        this.dispose();
    }//GEN-LAST:event_ReturnButtonActionPerformed

    private boolean esUnaFechaValida(String fecha) {
        // Primero verificamos el formato
        if (!fecha.matches("\\d{2}/\\d{2}/\\d{4}")) {
            return false;
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false); // Esto hace que el parsing sea estricto

        try {
            // Intentamos parsear la fecha
            sdf.parse(fecha);

            // Validaciones adicionales
            String[] partes = fecha.split("/");
            int dia = Integer.parseInt(partes[0]);
            int mes = Integer.parseInt(partes[1]);
            int año = Integer.parseInt(partes[2]);

            // Validar rangos
            if (mes < 1 || mes > 12)
                return false;
            if (dia < 1 || dia > 31)
                return false;
            if (año < 2023 || año > 2100)
                return false; // Ajusta el rango según tus necesidades

            // Validar que la fecha no sea anterior a la actual
            Date fechaIngresada = sdf.parse(fecha);
            Date fechaActual = new Date();
            if (fechaIngresada.before(fechaActual)) {
                return false;
            }

            return true;
        } catch (ParseException e) {
            return false;
        }
    }

    private void UnpaidLeaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnpaidLeaveButtonActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar un permiso sin goce de salario?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }

            //Solicitar un input de la fecha de inicio del permiso
            String fechaInicio = JOptionPane.showInputDialog(this, "Ingrese la fecha de inicio de la ausencia (dd/mm/yyyy):");
            if (fechaInicio == null || "".equals(fechaInicio)) {
                return;
            } 

            if (!esUnaFechaValida(fechaInicio)) {
                JOptionPane.showMessageDialog(this, """
                                                    La fecha ingresada no es v\u00e1lida. Por favor, ingrese una fecha correcta en formato dd/mm/yyyy.
                                                    Aseg\u00farese de que:
                                                    - El formato sea dd/mm/yyyy
                                                    - La fecha sea posterior a la actual
                                                    - El d\u00eda y mes sean v\u00e1lidos
                                                    - El a\u00f1o est\u00e9 entre 2023 y 2100""",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //Obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());

            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Permiso", fechaInicio, "Permiso sin goce de salario con fecha " + fechaInicio + " solicitada la fecha " + fechaActual);
            
            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado el permiso sin goce de salario correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error al registrar el permiso sin goce de salario.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UnpaidLeaveButtonActionPerformed

    private void SpouseDeathLeaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpouseDeathLeaveButtonActionPerformed
        try {
            // Mensaje de confirmacion si desea solicitar un permiso sin goce de salario
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar un permiso por fallecimiento de cónyuge?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }
            //Obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());

            //Crear un nuevo permiso por fallecimiento de cónyuge
            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Permiso", fechaActual, "Permiso por fallecimiento de cónyuge");
            
            //Mostrar mensaje de confirmación
            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado el permiso por fallecimiento de cónyuge correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error al registrar el permiso por fallecimiento de cónyuge.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SpouseDeathLeaveButtonActionPerformed

    private void ParentalLeaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParentalLeaveButtonActionPerformed
        try {
            // Mensaje de confirmacion si desea solicitar un permiso sin goce de salario
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar un permiso por nacimiento de hijos?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }
            
            //Solicitar un input de la fecha de inicio del permiso
            String fechaInicio = JOptionPane.showInputDialog(this, "Ingrese la fecha de inicio de la ausencia (dd/mm/yyyy):");
            if (fechaInicio == null || "".equals(fechaInicio)) {
                return;
            } else if (!fechaInicio.matches("\\d{2}/\\d{2}/\\d{4}")) {
                JOptionPane.showMessageDialog(this,
                        "Formato de fecha incorrecto. Debe ser dd/mm/yyyy.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
            
            //Crear un nuevo permiso por nacimiento de hijos
            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Permiso", fechaInicio, "Permiso por nacimiento de hijos solicitada fecha " + fechaActual);
            
            //Mostrar mensaje de confirmación
            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado el permiso por nacimiento de hijos correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error al registrar el permiso por nacimiento de hijos.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ParentalLeaveButtonActionPerformed

    private void SickLeaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SickLeaveButtonActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar un permiso sin goce de salario?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }

            // Solicitar un input de la fecha de inicio del permiso
            String fechaInicio = JOptionPane.showInputDialog(this,
                    "Ingrese la fecha de inicio del permiso (dd/mm/yyyy):");
            if (fechaInicio == null || "".equals(fechaInicio)) {
                return;
            } else if (!fechaInicio.matches("\\d{2}/\\d{2}/\\d{4}")) {
                JOptionPane.showMessageDialog(this,
                        "Formato de fecha incorrecto. Debe ser dd/mm/yyyy.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            //Obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
            
            //Crear un nuevo permiso por enfermedad
            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Permiso", fechaActual, "Permiso por enfermedad para el dia " + fechaInicio);
            
            //Mostrar mensaje de confirmación
            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado el permiso por enfermedad correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error al registrar el permiso por enfermedad.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_SickLeaveButtonActionPerformed

    private void ParentalDeathLeaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParentalDeathLeaveButtonActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar un permiso por fallecimiento de padres?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }
            //Obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
            
            //Crear un nuevo permiso por fallecimiento de padres
            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Permiso", fechaActual, "Permiso por fallecimiento de padres");
            
            //Mostrar mensaje de confirmación
            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado el permiso por fallecimiento de padres correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error al registrar el permiso por fallecimiento de padres.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ParentalDeathLeaveButtonActionPerformed

    private void MaternityLeaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaternityLeaveButtonActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar una licencia por maternidad?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }

            //Obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
            
            //Crear una nueva licencia por maternidad
            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Licencia", fechaActual, "Licencia por maternidad");
            
            //Mostrar mensaje de confirmación
            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado la licencia por maternidad correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error al registrar la licencia por maternidad.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MaternityLeaveButtonActionPerformed

    private void PrivateExamenLicenseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrivateExamenLicenseButtonActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar una licencia por examen privado?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }
            
            //Solicitar un input de la fecha de inicio del permiso
            String fechaInicio = JOptionPane.showInputDialog(this, "Ingrese la fecha de inicio de la ausencia (dd/mm/yyyy):");
            if (fechaInicio == null || "".equals(fechaInicio)) {
                return;
            } else if (!fechaInicio.matches("\\d{2}/\\d{2}/\\d{4}")) {
                JOptionPane.showMessageDialog(this,
                        "Formato de fecha incorrecto. Debe ser dd/mm/yyyy.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
            
            //Crear una nueva licencia por examen privado
            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Licencia", fechaInicio, "Licencia por examen privado solicitado " + fechaActual);
            
            //Mostrar mensaje de confirmación
            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado la licencia por examen privado correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error al registrar la licencia por examen privado.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PrivateExamenLicenseButtonActionPerformed

    private void SupervisedPracticeLicenseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupervisedPracticeLicenseButtonActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar una licencia para EPS?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }
            //Obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
            
            //Crear una nueva licencia para EPS
            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Licencia", fechaActual, "Licencia para EPS");
            
            //Mostrar mensaje de confirmación
            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado la licencia para EPS correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error al registrar la licencia para EPS.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SupervisedPracticeLicenseButtonActionPerformed

    private void VacationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VacationsButtonActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar un permiso por vacaciones?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }

            //Obtener los dias de vacaciones del empleado buscado
            int diasVacaciones = Empleado.calcularVacaciones(idEncontrado);
            if (diasVacaciones <= 0) {
                JOptionPane.showMessageDialog(this,
                        "El empleado no tiene días de vacaciones disponibles.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                // Mostrar los dias de vacaciones disponibles
                JOptionPane.showMessageDialog(this,
                        "El empleado tiene " + diasVacaciones + " días de vacaciones disponibles.",
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE);
            }

            // Solicitar un input de la fecha de inicio del permiso
            String fechaInicio = JOptionPane.showInputDialog(this,
                    "Ingrese la fecha de inicio de la ausencia (dd/mm/yyyy):");
            if (fechaInicio == null || "".equals(fechaInicio)) {
                return;
            }

            if (!esUnaFechaValida(fechaInicio)) {
                JOptionPane.showMessageDialog(this, """
                                                    La fecha ingresada no es v\u00e1lida. Por favor, ingrese una fecha correcta en formato dd/mm/yyyy.
                                                    Aseg\u00farese de que:
                                                    - El formato sea dd/mm/yyyy
                                                    - La fecha sea posterior a la actual
                                                    - El d\u00eda y mes sean v\u00e1lidos
                                                    - El a\u00f1o est\u00e9 entre 2023 y 2100""",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Solicitar un input de la fecha de inicio del permiso
            String fechaFin = JOptionPane.showInputDialog(this,
                    "Ingrese la fecha de inicio de la ausencia (dd/mm/yyyy):");
            if (fechaInicio == null || "".equals(fechaInicio)) {
                return;
            }

            if (!esUnaFechaValida(fechaInicio)) {
                JOptionPane.showMessageDialog(this, """
                                                    La fecha ingresada no es v\u00e1lida. Por favor, ingrese una fecha correcta en formato dd/mm/yyyy.
                                                    Aseg\u00farese de que:
                                                    - El formato sea dd/mm/yyyy
                                                    - La fecha sea posterior a la actual
                                                    - El d\u00eda y mes sean v\u00e1lidos
                                                    - El a\u00f1o est\u00e9 entre 2023 y 2100""",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            try {
                //Validar que la fecha de inicio sea menor a la fecha de fin
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                Date fechaInicioDate = sdf.parse(fechaInicio);
                Date fechaFinDate = sdf.parse(fechaFin);
                if (fechaInicioDate.after(fechaFinDate)) {
                    JOptionPane.showMessageDialog(this,
                            "La fecha de inicio debe ser menor a la fecha de fin.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } 

                // Calcular la diferencia en milisegundos
                long diferenciaMilisegundos = fechaFinDate.getTime() - fechaInicioDate.getTime();

                // Convertir la diferencia a días
                long diferenciaDias = diferenciaMilisegundos / (1000 * 60 * 60 * 24);

                // Comparar la diferencia de días con diasVacaciones
                if (diferenciaDias > diasVacaciones) {
                    JOptionPane.showMessageDialog(this,
                            "No tienes dias suficientes para tomar vacaciones.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                            return;
                }
            } catch(Exception e){
                JOptionPane.showMessageDialog(this,
                            "No se pudo calcular con las fechas ingresadas. Verifique que las fechas ingresadas sean validas.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                return;
            }

            //Obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
            
            //Crear un nuevo permiso por vacaciones
            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Vacaciones", fechaActual, "Permiso por vacaciones para el periodo " + fechaInicio + " a " + fechaFin);
            
            //Mostrar mensaje de confirmación
            if (exito) {
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado el permiso por vacaciones correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Error al registrar el permiso por vacaciones.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_VacationsButtonActionPerformed

    private void AbsenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbsenceButtonActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog(this, "¿Desea registrar una ausencia?",
                    "Confirmación", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }

            //Solicitar un input de la fecha de inicio del permiso
            String fechaInicio = JOptionPane.showInputDialog(this, "Ingrese la fecha de inicio de la ausencia (dd/mm/yyyy):");
            if (fechaInicio == null || "".equals(fechaInicio)) {
                return;
            } else if (!fechaInicio.matches("\\d{2}/\\d{2}/\\d{4}")) {
                JOptionPane.showMessageDialog(this,
                        "Formato de fecha incorrecto. Debe ser dd/mm/yyyy.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            //Obtener fecha actual en formato dd/mm/yyyy
            String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
            
            //Crear una nueva ausencia
            boolean exito = AccionPersonal.registrarAccion(idEncontrado, "Otros", fechaInicio, "Ausencia solicitada fecha " + fechaActual);
            
            //Mostrar mensaje de confirmación
            if (exito) {
                System.out.println("Ausencia registrada correctamente.");
                JOptionPane.showMessageDialog(this,
                        "Se ha registrado la ausencia correctamente.",
                        "Information",
                        JOptionPane.OK_OPTION);
            } else {
                System.out.println("Error al registrar la ausencia.");
                JOptionPane.showMessageDialog(this,
                        "Error al registrar la ausencia.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AbsenceButtonActionPerformed

    private void LoadRecentActionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadRecentActionsButtonActionPerformed
            //Obtener acciones recientes
            ArrayList<AccionPersonal> acciones = AccionPersonal.consultarAccionesEmpleado(idEncontrado);
            
            if(acciones == null || acciones.isEmpty()){
                JOptionPane.showMessageDialog(this,
                        "Error al consultar las acciones.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            //Crear un modelo de tabla
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("Tipo");
            model.addColumn("Fecha");
            model.addColumn("Detalle");

            //Agregar las acciones al modelo de tabla
            for (AccionPersonal accion : acciones) {
                model.addRow(new Object[]{accion.getIdAccion(), accion.getTipoAccion(), accion.getFechaAccion(), accion.getDetalle()});
            }

            //Mostrar las acciones en la tabla
            jTable1.setModel(model);
            
            // Bloquear la edición de las celdas en la tabla
            jTable1.setDefaultEditor(Object.class, null);

    }//GEN-LAST:event_LoadRecentActionsButtonActionPerformed

    private void SearchEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchEmployeeButtonActionPerformed
        //Validar haya ingresado un dato en el campo
        if("".equals(EmployeeIdTxt.getText()) || EmployeeIdTxt.getText() == null){
            JOptionPane.showMessageDialog(this,
                "Debe ingresar un número",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(Empleado.getEmpleados() == null || Empleado.getEmpleados().isEmpty()){
        Empleado.obtenerTodosLosEmpleados();   
        }
        // Buscar empleado por id
        int idEmpleado = Integer.parseInt(EmployeeIdTxt.getText());
        Empleado empleado = Empleado.getInformacionEmpleado(idEmpleado);
        if (empleado == null){
            JOptionPane.showMessageDialog(this,
                "No se encontró el empleado con ese ID.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this,
                "Empleado encontrado: " + empleado.getNombre()+ " " + empleado.getApellido(),
                "Exito",
                JOptionPane.INFORMATION_MESSAGE);
            EmployeeNameTxt.setText(empleado.getNombre()+ " " + empleado.getApellido());
            idEncontrado = idEmpleado; 
            UnpaidLeaveButton.setEnabled(true);
            SpouseDeathLeaveButton.setEnabled(true);
            ParentalLeaveButton.setEnabled(true);
            SickLeaveButton.setEnabled(true);
            ParentalDeathLeaveButton.setEnabled(true);
            MaternityLeaveButton.setEnabled(true);
            PrivateExamenLicenseButton.setEnabled(true);
            SupervisedPracticeLicenseButton.setEnabled(true);
            VacationsButton.setEnabled(true);
            AbsenceButton.setEnabled(true);
            LoadRecentActionsButton.setEnabled(true);
        }
    }//GEN-LAST:event_SearchEmployeeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlAccionPersonalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlAccionPersonalForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AbsenceButton;
    private javax.swing.JTextField EmployeeIdTxt;
    private javax.swing.JTextField EmployeeNameTxt;
    private javax.swing.JButton LoadRecentActionsButton;
    private javax.swing.JButton MaternityLeaveButton;
    private javax.swing.JButton ParentalDeathLeaveButton;
    private javax.swing.JButton ParentalLeaveButton;
    private javax.swing.JButton PrivateExamenLicenseButton;
    private javax.swing.JButton ReturnButton;
    private javax.swing.JButton SearchEmployeeButton;
    private javax.swing.JLabel SearchEmployeeIdLabel;
    private javax.swing.JButton SickLeaveButton;
    private javax.swing.JButton SpouseDeathLeaveButton;
    private javax.swing.JLabel StaffControlActionLabel;
    private javax.swing.JButton SupervisedPracticeLicenseButton;
    private javax.swing.JButton UnpaidLeaveButton;
    private javax.swing.JButton VacationsButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
