/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ProyectoFinal.forms;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import ProyectoFinal.Reportes;
import ProyectoFinal.SistemaRecursosHumanos;
import ProyectoFinal.MovimientoPersonal;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class MovimientoPersonalForm extends javax.swing.JFrame {

    /**
     * Creates new form MovimientoPersonalForm
     */
    public MovimientoPersonalForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StaffMovementReportLabel = new javax.swing.JLabel();
        ReturnButton = new javax.swing.JButton();
        QueryRecentMovementsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        InitialDateTxt = new javax.swing.JFormattedTextField();
        FinalDateTxt = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        StaffMovementReportLabel.setFont(new java.awt.Font("Eras Medium ITC", 0, 18)); // NOI18N
        StaffMovementReportLabel.setText("Reporte de Movimientos de Personal");

        ReturnButton.setText("Regresar al Menú Principal");
        ReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnButtonActionPerformed(evt);
            }
        });

        QueryRecentMovementsButton.setText("Consultar movimientos recientes");
        QueryRecentMovementsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueryRecentMovementsButtonActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Fecha Inicio:");

        jLabel2.setText("Fecha Fin:");

        jLabel3.setFont(new java.awt.Font("Eras Demi ITC", 0, 14)); // NOI18N
        jLabel3.setText("OJO: La fecha de incio y fecha fin debe llevar el formato DD/MM/AAAA Ej: 01/01/2020");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(335, 335, 335)
                        .addComponent(StaffMovementReportLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 260, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(143, 143, 143))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InitialDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FinalDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(325, 325, 325))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(QueryRecentMovementsButton)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StaffMovementReportLabel)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InitialDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FinalDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 390, Short.MAX_VALUE)
                .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(57, 57, 57)
                    .addComponent(QueryRecentMovementsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(57, 57, 57)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnButtonActionPerformed
        //cerrar el form actual definitivamente
        this.dispose();
    }//GEN-LAST:event_ReturnButtonActionPerformed

    private void QueryRecentMovementsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueryRecentMovementsButtonActionPerformed
        ArrayList<Reportes> reporte = null;
        ArrayList<MovimientoPersonal> movimiento = null;
        String FechaInicial = InitialDateTxt.getText();
        String FechaFinal = FinalDateTxt.getText();
        DefaultTableModel modelo = new DefaultTableModel();
        
        //Validar si hay datos en la tabla, si los hay, limpiar toda la tabla
        if(jTable1.getRowCount() > 0){
            modelo.setRowCount(0);
        }
        

        if( (FechaInicial.equals("") && FechaFinal.equals("")) || (FechaInicial == null && FechaFinal == null ) ){
            reporte = Reportes.generarReporteMovimientosPersonal();
            modelo.addColumn("ID Movimiento");
            modelo.addColumn("ID Empleado");
            modelo.addColumn("Nombre");
            modelo.addColumn("Apellido");
            modelo.addColumn("Tipo de Movimiento");
            modelo.addColumn("Fecha");
            modelo.addColumn("Detalle");

            for (Reportes r : reporte) {
                Object[] fila = new Object[7];
                fila[0] = r.getIdMov();
                fila[1] = r.getIdEmpleado();
                fila[2] = r.getNombre();
                fila[3] = r.getApellido();
                fila[4] = r.getTipoMovimiento();
                fila[5] = r.getFechaMovimiento();
                fila[6] = r.getDetalleMovimiento();
                modelo.addRow(fila);
            }

            jTable1.setModel(modelo);

            //Bloquear la edición de las celdas de la tabla
            jTable1.setDefaultEditor(Object.class, null);
        } else if(!FechaInicial.equals("") && !FechaFinal.equals("")){
            //Comparar las fechas y validar que la fecha inicial sea menor a la fecha final
            try {
                if(SistemaRecursosHumanos.validarFechas(FechaInicial, FechaFinal)){
                    movimiento = MovimientoPersonal.generarReporteMovimientos(FechaInicial, FechaFinal);
                    modelo.addColumn("ID Movimiento");
                    modelo.addColumn("ID Empleado");
                    modelo.addColumn("Nombre");
                    modelo.addColumn("Apellido");
                    modelo.addColumn("Tipo de Movimiento");
                    modelo.addColumn("Fecha");
                    modelo.addColumn("Detalle");

                    for (MovimientoPersonal m : movimiento) {
                        Object[] fila = new Object[7];
                        fila[0] = m.getIdMovimiento();
                        fila[1] = m.getIdEmpleado();
                        fila[2] = m.getTipoMovimiento();
                        fila[3] = m.getFechaMovimiento();
                        fila[4] = m.getDetalle();
                        modelo.addRow(fila);
                    }

                    jTable1.setModel(modelo);

                    //Bloquear la edición de las celdas de la tabla
                    jTable1.setDefaultEditor(Object.class, null);
                } else {
                    System.out.println("La fecha inicial debe ser menor a la fecha final");
                    JOptionPane.showMessageDialog(this,
                        "La fecha inicial debe ser menor a la fecha final",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } catch (ParseException ex) {
                Logger.getLogger(MovimientoPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (!FechaInicial.equals("") && FechaFinal.equals("")){
            FechaFinal = "31/12/2040";
            try {
                if(SistemaRecursosHumanos.validarFechas(FechaInicial, FechaFinal)){
                    movimiento = MovimientoPersonal.generarReporteMovimientos(FechaInicial, FechaFinal);
                    modelo.addColumn("ID Movimiento");
                    modelo.addColumn("ID Empleado");
                    modelo.addColumn("Tipo de Movimiento");
                    modelo.addColumn("Fecha");
                    modelo.addColumn("Detalle");

                    for (MovimientoPersonal m : movimiento) {
                        Object[] fila = new Object[7];
                        fila[0] = m.getIdMovimiento();
                        fila[1] = m.getIdEmpleado();
                        fila[2] = m.getTipoMovimiento();
                        fila[3] = m.getFechaMovimiento();
                        fila[4] = m.getDetalle();
                        modelo.addRow(fila);
                    }

                    jTable1.setModel(modelo);

                    //Bloquear la edición de las celdas de la tabla
                    jTable1.setDefaultEditor(Object.class, null);
                } else {
                    System.out.println("La fecha inicial debe ser menor a la fecha final");
                    JOptionPane.showMessageDialog(this,
                        "La fecha inicial debe ser menor a la fecha final",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } catch (ParseException ex) {
                Logger.getLogger(MovimientoPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else if (FechaInicial.equals("") && !FechaFinal.equals("")){
            FechaInicial = "01/01/1900";
            try {
                if(SistemaRecursosHumanos.validarFechas(FechaInicial, FechaFinal)){
                    movimiento = MovimientoPersonal.generarReporteMovimientos(FechaInicial, FechaFinal);
                    modelo.addColumn("ID Movimiento");
                    modelo.addColumn("ID Empleado");
                    modelo.addColumn("Tipo de Movimiento");
                    modelo.addColumn("Fecha");
                    modelo.addColumn("Detalle");

                    for (MovimientoPersonal m : movimiento) {
                        Object[] fila = new Object[7];
                        fila[0] = m.getIdMovimiento();
                        fila[1] = m.getIdEmpleado();
                        fila[2] = m.getTipoMovimiento();
                        fila[3] = m.getFechaMovimiento();
                        fila[4] = m.getDetalle();
                        modelo.addRow(fila);
                    }

                    jTable1.setModel(modelo);

                    //Bloquear la edición de las celdas de la tabla
                    jTable1.setDefaultEditor(Object.class, null);
                } else {
                    System.out.println("La fecha inicial debe ser menor a la fecha final");
                    JOptionPane.showMessageDialog(this,
                        "La fecha inicial debe ser menor a la fecha final",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } catch (ParseException ex) {
                Logger.getLogger(MovimientoPersonalForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Hubo un error al tratar de calcular las fechas, intente de nuevo por favor",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_QueryRecentMovementsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovimientoPersonalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovimientoPersonalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovimientoPersonalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovimientoPersonalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovimientoPersonalForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField FinalDateTxt;
    private javax.swing.JFormattedTextField InitialDateTxt;
    private javax.swing.JButton QueryRecentMovementsButton;
    private javax.swing.JButton ReturnButton;
    private javax.swing.JLabel StaffMovementReportLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
